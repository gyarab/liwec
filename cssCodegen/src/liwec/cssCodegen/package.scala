package liwec.cssCodegen

import java.util.Calendar
import com.softwaremill.sttp._
import ujson._
import upickle.{default => up}

sealed trait StrOrSeq
object StrOrSeq {
    case class CStr(val value: String) extends StrOrSeq
    case class CSeq(val value: Seq[String]) extends StrOrSeq

    implicit val r: up.Reader[StrOrSeq] =
        up.reader[Js.Value].map[StrOrSeq](
            json => json match {
                case Js.Arr(s) =>
                    CSeq(s.toSeq.map(_.str))
                case Js.Str(s) => CStr(s)
                case _ => throw new Exception("Error reading StrOrSeq")
            }
        )
}

case class Property(
    syntax: String,
    media: StrOrSeq,
    inherited: Boolean,
    animationType: StrOrSeq,
    percentages: StrOrSeq,
    groups: Seq[String],
    initial: StrOrSeq,
    appliesto: String,
    computed: StrOrSeq,
    order: String,
    status: String,
    mdn_url: String = "",
    stacking: Boolean = false,
    alsoAppliesTo: StrOrSeq = StrOrSeq.CSeq(Seq()),
)
object Property {
    implicit val r: up.Reader[Property] = up.macroR
}

object CssCodegen {
    implicit val sttpBackend = HttpURLConnectionBackend()
    val jsonDataUrl =
        uri"https://github.com/mdn/data/raw/master/css/properties.json"

    def fetchData() = {
        val jsonStr = sttp.get(jsonDataUrl).send().unsafeBody
        up.read[Map[String, Property]](jsonStr)
    }

    def makeCamelCase(str: String) =
        "-(.)".r.replaceAllIn(
            "^-".r.replaceFirstIn(str, ""),
            m => m.group(1).toUpperCase)

    def generateOutput() = {
        val props = fetchData()
        val timestamp = Calendar.getInstance().getTime()
s"""
/*
 * Generated by liwec codegen on ${timestamp}
 */

package liwec

import liwec.cssDslTypes._

package object cssDsl
        extends SelectorPrefixes {
""" +
    (for((name, prop) <- props) yield
        s"""    val ${makeCamelCase(name)} = Property[String]("${name}")"""
).mkString("\n") + """
}
"""
    }

    def main(args: Array[String]): Unit = {
        println(generateOutput())
    }
}
