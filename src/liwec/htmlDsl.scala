/*
 * Generated by liwec codegen on Mon Oct 01 19:29:33 CEST 2018
 */

package liwec

import scalajs.js
import org.scalajs.dom._
import liwec.htmlDslTypes._

package object htmlDsl {
    // Event types that aren't in scalajs-dom
    type MutationNameEvent = Event
    type SpeechSynthesisEvent = Event
    type GamepadEvent = Event
    type TimeEvent = Event
    type NotificationEvent = Event
    type SVGEvent = Event
    type AudioProcessingEvent = Event
    type DeviceMotionEvent = Event
    type SpeechRecognitionEvent = Event
    type PushEvent = Event
    type SVGZoomEvent = Event
    type UserProximityEvent = Event
    type DeviceProximityEvent = Event
    type DeviceOrientationEvent = Event
    type PageTransitionEvent = Event
    type DeviceLightEvent = Event

    trait AttrApplicable2 extends VNode
    trait AttrApplicable34 extends VNode
    trait AttrApplicable21 extends VNode
    trait AttrApplicable27 extends VNode
    trait AttrApplicable30 extends VNode
    trait AttrApplicable16 extends VNode
    trait AttrApplicable1 extends VNode
    trait AttrApplicable14 extends VNode
    trait AttrApplicable39 extends VNode
    trait AttrApplicable28 extends VNode
    trait AttrApplicable17 extends VNode
    trait AttrApplicable22 extends VNode
    trait AttrApplicable3 extends VNode
    trait AttrApplicable10 extends VNode
    trait AttrApplicable41 extends VNode
    trait AttrApplicable35 extends VNode
    trait AttrApplicable23 extends VNode
    trait AttrApplicable7 extends VNode
    trait AttrApplicable12 extends VNode
    trait AttrApplicable15 extends VNode
    trait AttrApplicable31 extends VNode
    trait AttrApplicable26 extends VNode
    trait AttrApplicable24 extends VNode
    trait AttrApplicable29 extends VNode
    trait AttrApplicable20 extends VNode
    trait AttrApplicable6 extends VNode
    trait AttrApplicable25 extends VNode
    trait AttrApplicable36 extends VNode
    trait AttrApplicable18 extends VNode
    trait AttrApplicable38 extends VNode
    trait AttrApplicable32 extends VNode
    trait AttrApplicable9 extends VNode
    trait AttrApplicable11 extends VNode
    trait AttrApplicable5 extends VNode
    trait AttrApplicable37 extends VNode
    trait AttrApplicable19 extends VNode
    trait AttrApplicable8 extends VNode
    trait AttrApplicable40 extends VNode
    trait AttrApplicable13 extends VNode
    trait AttrApplicable4 extends VNode
    trait AttrApplicable33 extends VNode

    /** IDs of the <th> elements which applies to this element. */
    lazy val headers = Attr[AttrApplicable3, String]("headers")
    /** Indicates that the hyperlink is to be used for downloading a resource. */
    lazy val download = Attr[AttrApplicable18, String]("download")
    /** Security Feature that allows browsers to verify what they fetch. */
    lazy val integrity = Attr[AttrApplicable26, String]("integrity")
    /** Defines a regular expression which the element's value will be validated against. */
    lazy val pattern = Attr[VNodeTagInput, String]("pattern")
    /** Defines a default value which will be displayed in the element on page load. */
    lazy val value = Attr[AttrApplicable38, String]("value")
    /** Specifies the horizontal alignment of the element. */
    lazy val align = Attr[AttrApplicable2, String]("align")
    /** Specifies a picture which represents the command. */
    lazy val icon = Attr[VNodeTagCommand, String]("icon")
    /** Specifies a hint of the media for which the linked resource was designed. */
    lazy val media = Attr[AttrApplicable21, String]("media")
    /** Background color of the element. Note: This is a legacy attribute. Please use the CSS background-color property instead. */
    lazy val bgcolor = Attr[AttrApplicable17, String]("bgcolor")
    /** Indicates the lower bound of the upper range. */
    lazy val high = Attr[VNodeTagMeter, String]("high")
    /**  */
    lazy val sizes = Attr[AttrApplicable9, String]("sizes")
    /** Defines the type of the element. */
    lazy val type_ = Attr[AttrApplicable34, String]("type")
    /** Contains the time range of already buffered media. */
    lazy val buffered = Attr[AttrApplicable29, String]("buffered")
    /** Defines the cells that the header test (defined in the th element) relates to. */
    lazy val scope = Attr[VNodeTagTh, String]("scope")
    /** Prevents rendering of given element, while keeping child elements, e.g. script elements, active. */
    lazy val hidden = Attr[VNode, String]("hidden")
    /** A set of values specifying the coordinates of the hot-spot region. */
    lazy val coords = Attr[VNodeTagArea, String]("coords")
    /** Indicates the date and time associated with the element. */
    lazy val datetime = Attr[AttrApplicable24, String]("datetime")
    /**  */
    lazy val srcset = Attr[VNodeTagImg, String]("srcset")
    /** Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left) */
    lazy val dirAttr = Attr[VNode, String]("dir")
    /**  */
    lazy val itemprop = Attr[VNode, String]("itemprop")
    /** Indicates whether controls in this form can by default have their values automatically completed by the browser. */
    lazy val autocomplete = Attr[AttrApplicable39, String]("autocomplete")
    /** A value associated with http-equiv or name depending on the context. */
    lazy val contentAttr = Attr[VNodeTagMeta, String]("content")
    /** Specifies the Content Security Policy that an embedded document must agree to enforce upon itself. */
    lazy val csp = Attr[VNodeTagIframe, String]("csp")
    /** A URL indicating a poster frame to show until the user plays or seeks. */
    lazy val poster = Attr[VNodeTagVideo, String]("poster")
    /** Indicates whether the browser should show playback controls to the user. */
    lazy val controls = Attr[AttrApplicable29, String]("controls")
    /** Indicates that the element accept the dropping of content on it. */
    lazy val dropzone = Attr[VNode, String]("dropzone")
    /** Specifies the language of the linked resource. */
    lazy val hreflang = Attr[AttrApplicable15, String]("hreflang")
    /** Specify whether an elementâ€™s attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged. */
    lazy val translate = Attr[VNode, String]("translate")
    /** The URI of a program that processes the information submitted via the form. */
    lazy val action = Attr[VNodeTagForm, String]("action")
    /** Declares the character encoding of the page or script. */
    lazy val charset = Attr[AttrApplicable20, String]("charset")
    /** Indicates whether the audio will be initially silenced on page load. */
    lazy val muted = Attr[AttrApplicable29, String]("muted")
    /**  */
    lazy val usemap = Attr[AttrApplicable12, String]("usemap")
    /** Indicates the optimal numeric value. */
    lazy val optimum = Attr[VNodeTagMeter, String]("optimum")
    /** Indicates whether the element should be checked on page load. */
    lazy val checked = Attr[AttrApplicable5, String]("checked")
    /** Indicates whether the media should start playing from the start when it's finished. */
    lazy val loop = Attr[AttrApplicable11, String]("loop")
    /** Name of the element. For example used by the server to identify the fields in form submits. */
    lazy val name = Attr[AttrApplicable4, String]("name")
    /** How the element handles cross-origin requests */
    lazy val crossorigin = Attr[AttrApplicable10, String]("crossorigin")
    /** Indicates whether the user can interact with the element. */
    lazy val disabled = Attr[AttrApplicable1, String]("disabled")
    /** Defines CSS styles which will override styles previously set. */
    lazy val styleAttr = Attr[VNode, String]("style")
    /**  */
    lazy val dirname = Attr[AttrApplicable33, String]("dirname")
    /** Defines the ID of a <menu> element which will serve as the element's context menu. */
    lazy val contextmenu = Attr[VNode, String]("contextmenu")
    /** Alternative text in case an image can't be displayed. */
    lazy val alt = Attr[AttrApplicable23, String]("alt")
    /** Specifies the kind of text track. */
    lazy val kind = Attr[VNodeTagTrack, String]("kind")
    /** Defines the language used in the element. */
    lazy val lang = Attr[VNode, String]("lang")
    /** Contains a URI which points to the source of the quote or change. */
    lazy val citeAttr = Attr[AttrApplicable30, String]("cite")
    /** Specifies the relationship of the target object to the link object. */
    lazy val rel = Attr[AttrApplicable15, String]("rel")
    /** Indicates whether multiple values can be entered in an input of the type email or file. */
    lazy val multiple = Attr[AttrApplicable32, String]("multiple")
    /**  */
    lazy val radiogroup = Attr[VNodeTagCommand, String]("radiogroup")
    /** Indicates whether the text should be wrapped. */
    lazy val wrap = Attr[VNodeTagTextarea, String]("wrap")
    /** The element should be automatically focused after the page loaded. */
    lazy val autofocus = Attr[AttrApplicable16, String]("autofocus")
    /** Text to be displayed in a tooltip when hovering over the element. */
    lazy val titleAttr = Attr[VNode, String]("title")
    /** Defines a keyboard shortcut to activate or add focus to the element. */
    lazy val accesskey = Attr[VNode, String]("accesskey")
    /** The colspan attribute defines the number of columns a cell should span. */
    lazy val colspan = Attr[AttrApplicable3, String]("colspan")
    /** Indicates whether the list should be displayed in a descending order instead of a ascending. */
    lazy val reversed = Attr[VNodeTagOl, String]("reversed")
    /** Indicates whether the element's content is editable. */
    lazy val contenteditable = Attr[VNode, String]("contenteditable")
    /** Often used with CSS to style a specific element. The value of this attribute must be unique. */
    lazy val id = Attr[VNode, String]("id")
    /** Indicates if the element should be loaded lazily. */
    lazy val lazyload = Attr[AttrApplicable40, String]("lazyload")
    /** Defines a pragma directive. */
    lazy val httpEquiv = Attr[VNodeTagMeta, String]("http-equiv")
    /** Indicates the minimum value allowed. */
    lazy val min = Attr[AttrApplicable35, String]("min")
    /** Often used with CSS to style elements with common properties. */
    lazy val cls = Attr[VNode, String]("class")
    /** List of supported charsets. */
    lazy val acceptCharset = Attr[VNodeTagForm, String]("accept-charset")
    /** Indicates whether this element is required to fill out or not. */
    lazy val required = Attr[AttrApplicable31, String]("required")
    /** Indicates whether the element can be edited. */
    lazy val readonly = Attr[AttrApplicable33, String]("readonly")
    /** Specifies a user-readable title of the text track. */
    lazy val labelAttr = Attr[VNodeTagTrack, String]("label")
    /** Defines the minimum number of characters allowed in the element. */
    lazy val minlength = Attr[AttrApplicable33, String]("minlength")
    /** Indicates the form that is the owner of the element. */
    lazy val formAttr = Attr[AttrApplicable6, String]("form")
    /** Indicates that the track should be enabled unless the user's preferences indicate something different. */
    lazy val default = Attr[VNodeTagTrack, String]("default")
    /** Defines the number of rows a table cell should span over. */
    lazy val rowspan = Attr[AttrApplicable3, String]("rowspan")
    /** Defines the number of columns in a textarea. */
    lazy val cols = Attr[VNodeTagTextarea, String]("cols")
    /** The URL of a linked resource. */
    lazy val href = Attr[AttrApplicable27, String]("href")
    /** Defines whether the element can be dragged. */
    lazy val draggable = Attr[VNode, String]("draggable")
    /** The audio or video should play as soon as possible. */
    lazy val autoplay = Attr[AttrApplicable29, String]("autoplay")
    /** For the elements listed here, this establishes the element's width. Note: For all other instances, such as <div>, this is a legacy attribute, in which case the CSS width property should be used instead. */
    lazy val width = Attr[AttrApplicable8, String]("width")
    /** Stops a document loaded in an iframe from using certain features (such as submitting forms or opening new windows). */
    lazy val sandbox = Attr[VNodeTagIframe, String]("sandbox")
    /** Specifies the URL of the document's cache manifest. */
    lazy val manifest = Attr[VNodeTagHtml, String]("manifest")
    /** Indicates whether the whole resource, parts of it or nothing should be preloaded. */
    lazy val preload = Attr[AttrApplicable29, String]("preload")
    /** Indicates the maximum value allowed. */
    lazy val max = Attr[AttrApplicable19, String]("max")
    /**  */
    lazy val target = Attr[AttrApplicable25, String]("target")
    /**  */
    lazy val spanAttr = Attr[AttrApplicable14, String]("span")
    /** Defines the first number if other than 1. */
    lazy val start = Attr[VNodeTagOl, String]("start")
    /**  */
    lazy val scoped = Attr[VNodeTagStyle, String]("scoped")
    /** List of types the server accepts, typically a file type. */
    lazy val accept = Attr[AttrApplicable28, String]("accept")
    /** Defines a value which will be selected on page load. */
    lazy val selected = Attr[VNodeTagOption, String]("selected")
    /** Assigns a slot in a shadow DOM shadow tree to an element. */
    lazy val slotAttr = Attr[VNode, String]("slot")
    /** Indicates that the script should be executed after the page has been parsed. */
    lazy val defer = Attr[VNodeTagScript, String]("defer")
    /** Defines the width of the element (in pixels). If the element's type attribute is text or password then it's the number of characters. */
    lazy val size = Attr[AttrApplicable32, String]("size")
    /** Indicates that the script should be executed asynchronously. */
    lazy val async = Attr[VNodeTagScript, String]("async")
    /** Defines the maximum number of characters allowed in the element. */
    lazy val maxlength = Attr[AttrApplicable33, String]("maxlength")
    /** Indicates the relative fetch priority for the resource. */
    lazy val importance = Attr[AttrApplicable36, String]("importance")
    /** Indicates that the image is part of a server-side image map. */
    lazy val ismap = Attr[VNodeTagImg, String]("ismap")
    /** Defines the content type of the form date when the method is POST. */
    lazy val enctype = Attr[VNodeTagForm, String]("enctype")
    /** Specifies the type of key generated. */
    lazy val keytype = Attr[VNodeTagKeygen, String]("keytype")
    /** Controls whether and how text input is automatically capitalized as it is entered/edited by the user. */
    lazy val autocapitalize = Attr[VNode, String]("autocapitalize")
    /** Indicates the action of the element, overriding the action defined in the <form>. */
    lazy val formaction = Attr[AttrApplicable41, String]("formaction")
    /** Indicates the upper bound of the lower range. */
    lazy val low = Attr[VNodeTagMeter, String]("low")
    /** Indicates the preferred method to decode the image. */
    lazy val decoding = Attr[VNodeTagImg, String]("decoding")
    /** Specifies the URL of the resource. */
    lazy val dataAttr = Attr[VNodeTagObject, String]("data")
    /** A challenge string that is submitted along with the public key. */
    lazy val challenge = Attr[VNodeTagKeygen, String]("challenge")
    /** Overrides the browser's default tab order and follows the one specified instead. */
    lazy val tabindex = Attr[VNode, String]("tabindex")
    /**  */
    lazy val srclang = Attr[VNodeTagTrack, String]("srclang")
    /** Specifies the height of elements listed here. For all other elements, use the CSS height property. Note: In some instances, such as <div>, this is a legacy attribute, in which case the CSS height property should be used instead. */
    lazy val height = Attr[AttrApplicable8, String]("height")
    /** The border width. Note: This is a legacy attribute. Please use the CSS border property instead. */
    lazy val border = Attr[AttrApplicable13, String]("border")
    /**  */
    lazy val step = Attr[VNodeTagInput, String]("step")
    /**  */
    lazy val srcdoc = Attr[VNodeTagIframe, String]("srcdoc")
    /** Defines the script language used in the element. */
    lazy val language = Attr[VNodeTagScript, String]("language")
    /** Indicates whether spell checking is allowed for the element. */
    lazy val spellcheck = Attr[VNode, String]("spellcheck")
    /** Specifies the URL of the applet's class file to be loaded and executed. */
    lazy val codeAttr = Attr[VNodeTagApplet, String]("code")
    /** Defines which HTTP method to use when submitting the form. Can be GET (default) or POST. */
    lazy val method = Attr[VNodeTagForm, String]("method")
    /** This attribute sets the text color using either a named color or a color specified in the hexadecimal #RRGGBB format. Note: This is a legacy attribute. Please use the CSS color property instead. */
    lazy val color = Attr[AttrApplicable37, String]("color")
    /**  */
    lazy val shape = Attr[AttrApplicable18, String]("shape")
    /** This attribute indicates that the form shouldn't be validated when submitted. */
    lazy val novalidate = Attr[VNodeTagForm, String]("novalidate")
    /** Describes elements which belongs to this one. */
    lazy val for_ = Attr[AttrApplicable22, String]("for")
    /**  */
    lazy val ping = Attr[AttrApplicable18, String]("ping")
    /** Defines the number of rows in a text area. */
    lazy val rows = Attr[VNodeTagTextarea, String]("rows")
    /**  */
    lazy val summaryAttr = Attr[VNodeTagTable, String]("summary")
    /** Indicates whether the details will be shown on page load. */
    lazy val open = Attr[VNodeTagDetails, String]("open")
    /** Identifies a list of pre-defined options to suggest to the user. */
    lazy val list = Attr[VNodeTagInput, String]("list")
    /** Provides a hint to the user of what can be entered in the field. */
    lazy val placeholder = Attr[AttrApplicable33, String]("placeholder")
    /** This attribute gives the absolute or relative URL of the directory where applets' .class files referenced by the code attribute are stored. */
    lazy val codebase = Attr[VNodeTagApplet, String]("codebase")
    /** Specifies a feature-policy for the iframe. */
    lazy val allow = Attr[VNodeTagIframe, String]("allow")
    /** The URL of the embeddable content. */
    lazy val src = Attr[AttrApplicable7, String]("src")

    lazy val onDOMCharacterDataModified = Attr[VNode, js.Function1[MutationEvent, Unit]]("onDOMCharacterDataModified")
    lazy val oncompositionstart = Attr[VNode, js.Function1[CompositionEvent, Unit]]("oncompositionstart")
    lazy val ontimeupdate = Attr[VNode, js.Function1[Event, Unit]]("ontimeupdate")
    lazy val onseeking = Attr[VNode, js.Function1[Event, Unit]]("onseeking")
    lazy val onaudiostart = Attr[VNode, js.Function1[Event, Unit]]("onaudiostart")
    lazy val onDOMFocusIn = Attr[VNode, js.Function1[FocusEvent, Unit]]("onDOMFocusIn")
    lazy val onsoundend = Attr[VNode, js.Function1[Event, Unit]]("onsoundend")
    lazy val onDOMElementNameChanged = Attr[VNode, js.Function1[MutationNameEvent, Unit]]("onDOMElementNameChanged")
    lazy val onended = Attr[VNode, js.Function1[Event, Unit]]("onended")
    lazy val ontouchcancel = Attr[VNode, js.Function1[TouchEvent, Unit]]("ontouchcancel")
    lazy val oncached = Attr[VNode, js.Function1[Event, Unit]]("oncached")
    lazy val onscroll = Attr[VNode, js.Function1[UIEvent, Unit]]("onscroll")
    lazy val onDOMNodeInserted = Attr[VNode, js.Function1[MutationEvent, Unit]]("onDOMNodeInserted")
    lazy val onsuccess = Attr[VNode, js.Function1[Event, Unit]]("onsuccess")
    lazy val onresume = Attr[VNode, js.Function1[SpeechSynthesisEvent, Unit]]("onresume")
    lazy val onDOMActivate = Attr[VNode, js.Function1[UIEvent, Unit]]("onDOMActivate")
    lazy val onshow = Attr[VNode, js.Function1[MouseEvent, Unit]]("onshow")
    lazy val onreadystatechange = Attr[VNode, js.Function1[Event, Unit]]("onreadystatechange")
    lazy val onvisibilitychange = Attr[VNode, js.Function1[Event, Unit]]("onvisibilitychange")
    lazy val onlostpointercapture = Attr[VNode, js.Function1[PointerEvent, Unit]]("onlostpointercapture")
    lazy val onspeechstart = Attr[VNode, js.Function1[Event, Unit]]("onspeechstart")
    lazy val onpointermove = Attr[VNode, js.Function1[PointerEvent, Unit]]("onpointermove")
    lazy val onpaste = Attr[VNode, js.Function1[ClipboardEvent, Unit]]("onpaste")
    lazy val onloadedmetadata = Attr[VNode, js.Function1[Event, Unit]]("onloadedmetadata")
    lazy val ongamepadconnected = Attr[VNode, js.Function1[GamepadEvent, Unit]]("ongamepadconnected")
    lazy val ononline = Attr[VNode, js.Function1[Event, Unit]]("ononline")
    lazy val onselectionchange = Attr[VNode, js.Function1[Event, Unit]]("onselectionchange")
    lazy val onmouseover = Attr[VNode, js.Function1[MouseEvent, Unit]]("onmouseover")
    lazy val ondownloading = Attr[VNode, js.Function1[Event, Unit]]("ondownloading")
    lazy val onloadstart = Attr[VNode, js.Function1[ProgressEvent, Unit]]("onloadstart")
    lazy val onrepeatEvent = Attr[VNode, js.Function1[TimeEvent, Unit]]("onrepeatEvent")
    lazy val onnotificationclick = Attr[VNode, js.Function1[NotificationEvent, Unit]]("onnotificationclick")
    lazy val onSVGUnload = Attr[VNode, js.Function1[SVGEvent, Unit]]("onSVGUnload")
    lazy val onplay = Attr[VNode, js.Function1[Event, Unit]]("onplay")
    lazy val onloadeddata = Attr[VNode, js.Function1[Event, Unit]]("onloadeddata")
    lazy val onaudioprocess = Attr[VNode, js.Function1[AudioProcessingEvent, Unit]]("onaudioprocess")
    lazy val onanimationiteration = Attr[VNode, js.Function1[AnimationEvent, Unit]]("onanimationiteration")
    lazy val onsoundstart = Attr[VNode, js.Function1[Event, Unit]]("onsoundstart")
    lazy val onmouseout = Attr[VNode, js.Function1[MouseEvent, Unit]]("onmouseout")
    lazy val onfullscreenchange = Attr[VNode, js.Function1[Event, Unit]]("onfullscreenchange")
    lazy val oncut = Attr[VNode, js.Function1[ClipboardEvent, Unit]]("oncut")
    lazy val onpointerlockchange = Attr[VNode, js.Function1[Event, Unit]]("onpointerlockchange")
    lazy val ondevicemotion = Attr[VNode, js.Function1[DeviceMotionEvent, Unit]]("ondevicemotion")
    lazy val onresult = Attr[VNode, js.Function1[SpeechRecognitionEvent, Unit]]("onresult")
    lazy val onversionchange = Attr[VNode, js.Function1[Event, Unit]]("onversionchange")
    lazy val onpush = Attr[VNode, js.Function1[PushEvent, Unit]]("onpush")
    lazy val onDOMContentLoaded = Attr[VNode, js.Function1[Event, Unit]]("onDOMContentLoaded")
    lazy val onboundary = Attr[VNode, js.Function1[SpeechSynthesisEvent, Unit]]("onboundary")
    lazy val onpointerdown = Attr[VNode, js.Function1[PointerEvent, Unit]]("onpointerdown")
    lazy val onselectstart = Attr[VNode, js.Function1[Event, Unit]]("onselectstart")
    lazy val ongamepaddisconnected = Attr[VNode, js.Function1[GamepadEvent, Unit]]("ongamepaddisconnected")
    lazy val onSVGZoom = Attr[VNode, js.Function1[SVGZoomEvent, Unit]]("onSVGZoom")
    lazy val onDOMAttributeNameChanged = Attr[VNode, js.Function1[MutationNameEvent, Unit]]("onDOMAttributeNameChanged")
    lazy val onpause = Attr[VNode, js.Function1[Event, Unit]]("onpause")
    lazy val ondragleave = Attr[VNode, js.Function1[DragEvent, Unit]]("ondragleave")
    lazy val onmousemove = Attr[VNode, js.Function1[MouseEvent, Unit]]("onmousemove")
    lazy val onpointercancel = Attr[VNode, js.Function1[PointerEvent, Unit]]("onpointercancel")
    lazy val onDOMSubtreeModified = Attr[VNode, js.Function1[MutationEvent, Unit]]("onDOMSubtreeModified")
    lazy val onpointerlockerror = Attr[VNode, js.Function1[Event, Unit]]("onpointerlockerror")
    lazy val onpopstate = Attr[VNode, js.Function1[PopStateEvent, Unit]]("onpopstate")
    lazy val onload = Attr[VNode, js.Function1[Event, Unit]]("onload")
    lazy val onseeked = Attr[VNode, js.Function1[Event, Unit]]("onseeked")
    lazy val onchargingtimechange = Attr[VNode, js.Function1[Event, Unit]]("onchargingtimechange")
    lazy val onsuspend = Attr[VNode, js.Function1[Event, Unit]]("onsuspend")
    lazy val onkeydown = Attr[VNode, js.Function1[KeyboardEvent, Unit]]("onkeydown")
    lazy val onSVGResize = Attr[VNode, js.Function1[SVGEvent, Unit]]("onSVGResize")
    lazy val onuserproximity = Attr[VNode, js.Function1[UserProximityEvent, Unit]]("onuserproximity")
    lazy val oncanplaythrough = Attr[VNode, js.Function1[Event, Unit]]("oncanplaythrough")
    lazy val onsubmit = Attr[VNode, js.Function1[Event, Unit]]("onsubmit")
    lazy val ondblclick = Attr[VNode, js.Function1[MouseEvent, Unit]]("ondblclick")
    lazy val onappinstalled = Attr[VNode, js.Function1[Event, Unit]]("onappinstalled")
    lazy val onwheel = Attr[VNode, js.Function1[WheelEvent, Unit]]("onwheel")
    lazy val onSVGAbort = Attr[VNode, js.Function1[SVGEvent, Unit]]("onSVGAbort")
    lazy val onchecking = Attr[VNode, js.Function1[Event, Unit]]("onchecking")
    lazy val onopen = Attr[VNode, js.Function1[Event, Unit]]("onopen")
    lazy val ondeviceorientation = Attr[VNode, js.Function1[DeviceOrientationEvent, Unit]]("ondeviceorientation")
    lazy val onpagehide = Attr[VNode, js.Function1[PageTransitionEvent, Unit]]("onpagehide")
    lazy val oncompositionupdate = Attr[VNode, js.Function1[CompositionEvent, Unit]]("oncompositionupdate")
    lazy val onunload = Attr[VNode, js.Function1[UIEvent, Unit]]("onunload")
    lazy val onpushsubscriptionchange = Attr[VNode, js.Function1[PushEvent, Unit]]("onpushsubscriptionchange")
    lazy val onmouseenter = Attr[VNode, js.Function1[MouseEvent, Unit]]("onmouseenter")
    lazy val ondrop = Attr[VNode, js.Function1[DragEvent, Unit]]("ondrop")
    lazy val onendEvent = Attr[VNode, js.Function1[TimeEvent, Unit]]("onendEvent")
    lazy val onchargingchange = Attr[VNode, js.Function1[Event, Unit]]("onchargingchange")
    lazy val onfocusout = Attr[VNode, js.Function1[FocusEvent, Unit]]("onfocusout")
    lazy val onslotchange = Attr[VNode, js.Function1[Event, Unit]]("onslotchange")
    lazy val oncompositionend = Attr[VNode, js.Function1[CompositionEvent, Unit]]("oncompositionend")
    lazy val onhashchange = Attr[VNode, js.Function1[HashChangeEvent, Unit]]("onhashchange")
    lazy val onresize = Attr[VNode, js.Function1[UIEvent, Unit]]("onresize")
    lazy val onselectAttr = Attr[VNode, js.Function1[UIEvent, Unit]]("onselect")
    lazy val ondevicechange = Attr[VNode, js.Function1[Event, Unit]]("ondevicechange")
    lazy val ondragenter = Attr[VNode, js.Function1[DragEvent, Unit]]("ondragenter")
    lazy val onaudioend = Attr[VNode, js.Function1[Event, Unit]]("onaudioend")
    lazy val onchange = Attr[VNode, js.Function1[Event, Unit]]("onchange")
    lazy val onafterprint = Attr[VNode, js.Function1[Event, Unit]]("onafterprint")
    lazy val ondevicelight = Attr[VNode, js.Function1[DeviceLightEvent, Unit]]("ondevicelight")
    lazy val onfullscreenerror = Attr[VNode, js.Function1[Event, Unit]]("onfullscreenerror")
    lazy val oncontextmenu = Attr[VNode, js.Function1[MouseEvent, Unit]]("oncontextmenu")
    lazy val onupgradeneeded = Attr[VNode, js.Function1[Event, Unit]]("onupgradeneeded")
    lazy val onfocusin = Attr[VNode, js.Function1[FocusEvent, Unit]]("onfocusin")
    lazy val onpointerup = Attr[VNode, js.Function1[PointerEvent, Unit]]("onpointerup")
    lazy val onmouseleave = Attr[VNode, js.Function1[MouseEvent, Unit]]("onmouseleave")
    lazy val onfocus = Attr[VNode, js.Function1[FocusEvent, Unit]]("onfocus")
    lazy val oncomplete = Attr[VNode, js.Function1[Event, Unit]]("oncomplete")
    lazy val onclick = Attr[VNode, js.Function1[MouseEvent, Unit]]("onclick")
    lazy val oncanplay = Attr[VNode, js.Function1[Event, Unit]]("oncanplay")
    lazy val onerror = Attr[VNode, js.Function1[Event, Unit]]("onerror")
    lazy val onblur = Attr[VNode, js.Function1[FocusEvent, Unit]]("onblur")
    lazy val oninvalid = Attr[VNode, js.Function1[Event, Unit]]("oninvalid")
    lazy val onprogressAttr = Attr[VNode, js.Function1[Event, Unit]]("onprogress")
    lazy val onlanguagechange = Attr[VNode, js.Function1[Event, Unit]]("onlanguagechange")
    lazy val ontouchmove = Attr[VNode, js.Function1[TouchEvent, Unit]]("ontouchmove")
    lazy val onvoiceschanged = Attr[VNode, js.Function1[Event, Unit]]("onvoiceschanged")
    lazy val onpointerenter = Attr[VNode, js.Function1[PointerEvent, Unit]]("onpointerenter")
    lazy val onbeforeunload = Attr[VNode, js.Function1[BeforeUnloadEvent, Unit]]("onbeforeunload")
    lazy val onmouseup = Attr[VNode, js.Function1[MouseEvent, Unit]]("onmouseup")
    lazy val onmousedown = Attr[VNode, js.Function1[MouseEvent, Unit]]("onmousedown")
    lazy val onresourcetimingbufferfull = Attr[VNode, js.Function1[Performance, Unit]]("onresourcetimingbufferfull")
    lazy val ondurationchange = Attr[VNode, js.Function1[Event, Unit]]("ondurationchange")
    lazy val onSVGScroll = Attr[VNode, js.Function1[SVGEvent, Unit]]("onSVGScroll")
    lazy val ondragend = Attr[VNode, js.Function1[DragEvent, Unit]]("ondragend")
    lazy val onDOMNodeRemoved = Attr[VNode, js.Function1[MutationEvent, Unit]]("onDOMNodeRemoved")
    lazy val ontransitionend = Attr[VNode, js.Function1[TransitionEvent, Unit]]("ontransitionend")
    lazy val ondischargingtimechange = Attr[VNode, js.Function1[Event, Unit]]("ondischargingtimechange")
    lazy val ontouchend = Attr[VNode, js.Function1[TouchEvent, Unit]]("ontouchend")
    lazy val onanimationend = Attr[VNode, js.Function1[AnimationEvent, Unit]]("onanimationend")
    lazy val onbeforeprint = Attr[VNode, js.Function1[Event, Unit]]("onbeforeprint")
    lazy val onnomatch = Attr[VNode, js.Function1[SpeechRecognitionEvent, Unit]]("onnomatch")
    lazy val oncopy = Attr[VNode, js.Function1[ClipboardEvent, Unit]]("oncopy")
    lazy val onreset = Attr[VNode, js.Function1[Event, Unit]]("onreset")
    lazy val onkeypress = Attr[VNode, js.Function1[KeyboardEvent, Unit]]("onkeypress")
    lazy val onend = Attr[VNode, js.Function1[Event, Unit]]("onend")
    lazy val onlevelchange = Attr[VNode, js.Function1[Event, Unit]]("onlevelchange")
    lazy val onblocked = Attr[VNode, js.Function1[Event, Unit]]("onblocked")
    lazy val onmessage = Attr[VNode, js.Function1[Event, Unit]]("onmessage")
    lazy val onstorage = Attr[VNode, js.Function1[StorageEvent, Unit]]("onstorage")
    lazy val onkeyup = Attr[VNode, js.Function1[KeyboardEvent, Unit]]("onkeyup")
    lazy val onobsolete = Attr[VNode, js.Function1[Event, Unit]]("onobsolete")
    lazy val onspeechend = Attr[VNode, js.Function1[Event, Unit]]("onspeechend")
    lazy val onpageshow = Attr[VNode, js.Function1[PageTransitionEvent, Unit]]("onpageshow")
    lazy val onpointerover = Attr[VNode, js.Function1[PointerEvent, Unit]]("onpointerover")
    lazy val ontouchstart = Attr[VNode, js.Function1[TouchEvent, Unit]]("ontouchstart")
    lazy val onDOMFocusOut = Attr[VNode, js.Function1[FocusEvent, Unit]]("onDOMFocusOut")
    lazy val ondeviceproximity = Attr[VNode, js.Function1[DeviceProximityEvent, Unit]]("ondeviceproximity")
    lazy val onanimationstart = Attr[VNode, js.Function1[AnimationEvent, Unit]]("onanimationstart")
    lazy val onplaying = Attr[VNode, js.Function1[Event, Unit]]("onplaying")
    lazy val onratechange = Attr[VNode, js.Function1[Event, Unit]]("onratechange")
    lazy val onnoupdate = Attr[VNode, js.Function1[Event, Unit]]("onnoupdate")
    lazy val onwaiting = Attr[VNode, js.Function1[Event, Unit]]("onwaiting")
    lazy val onvolumechange = Attr[VNode, js.Function1[Event, Unit]]("onvolumechange")
    lazy val onpointerleave = Attr[VNode, js.Function1[PointerEvent, Unit]]("onpointerleave")
    lazy val ondrag = Attr[VNode, js.Function1[DragEvent, Unit]]("ondrag")
    lazy val onmarkAttr = Attr[VNode, js.Function1[SpeechSynthesisEvent, Unit]]("onmark")
    lazy val ondragover = Attr[VNode, js.Function1[DragEvent, Unit]]("ondragover")
    lazy val onstart = Attr[VNode, js.Function1[Event, Unit]]("onstart")
    lazy val onclose = Attr[VNode, js.Function1[Event, Unit]]("onclose")
    lazy val ongotpointercapture = Attr[VNode, js.Function1[PointerEvent, Unit]]("ongotpointercapture")
    lazy val onloadend = Attr[VNode, js.Function1[ProgressEvent, Unit]]("onloadend")
    lazy val ontimeout = Attr[VNode, js.Function1[ProgressEvent, Unit]]("ontimeout")
    lazy val onSVGError = Attr[VNode, js.Function1[SVGEvent, Unit]]("onSVGError")
    lazy val onemptied = Attr[VNode, js.Function1[Event, Unit]]("onemptied")
    lazy val onmessageerror = Attr[VNode, js.Function1[MessageEvent, Unit]]("onmessageerror")
    lazy val ondragstart = Attr[VNode, js.Function1[DragEvent, Unit]]("ondragstart")
    lazy val onpointerout = Attr[VNode, js.Function1[PointerEvent, Unit]]("onpointerout")
    lazy val onDOMAttrModified = Attr[VNode, js.Function1[MutationEvent, Unit]]("onDOMAttrModified")
    lazy val oninputAttr = Attr[VNode, js.Function1[Event, Unit]]("oninput")
    lazy val onbeginEvent = Attr[VNode, js.Function1[TimeEvent, Unit]]("onbeginEvent")
    lazy val onDOMNodeRemovedFromDocument = Attr[VNode, js.Function1[MutationEvent, Unit]]("onDOMNodeRemovedFromDocument")
    lazy val onoffline = Attr[VNode, js.Function1[Event, Unit]]("onoffline")
    lazy val onDOMNodeInsertedIntoDocument = Attr[VNode, js.Function1[MutationEvent, Unit]]("onDOMNodeInsertedIntoDocument")
    lazy val onSVGLoad = Attr[VNode, js.Function1[SVGEvent, Unit]]("onSVGLoad")
    lazy val onabort = Attr[VNode, js.Function1[Event, Unit]]("onabort")
    lazy val onstalled = Attr[VNode, js.Function1[Event, Unit]]("onstalled")
    lazy val onorientationchange = Attr[VNode, js.Function1[Event, Unit]]("onorientationchange")
    lazy val onupdateready = Attr[VNode, js.Function1[Event, Unit]]("onupdateready")

    trait VNodeTagAcronym extends VNode
    trait VNodeTagTbody extends VNode  with AttrApplicable2 with AttrApplicable17
    trait VNodeTagDel extends VNode  with AttrApplicable24 with AttrApplicable30
    trait VNodeTagPre extends VNode
    trait VNodeTagBdo extends VNode
    trait VNodeTagTextarea extends VNode  with AttrApplicable39 with AttrApplicable6 with AttrApplicable33 with AttrApplicable31 with AttrApplicable16 with AttrApplicable4 with AttrApplicable1
    trait VNodeTagThead extends VNode  with AttrApplicable2
    trait VNodeTagFigcaption extends VNode
    trait VNodeTagS extends VNode
    trait VNodeTagOl extends VNode
    trait VNodeTagSpan extends VNode
    trait VNodeTagShadow extends VNode
    trait VNodeTagBody extends VNode  with AttrApplicable17
    trait VNodeTagArea extends VNode  with AttrApplicable23 with AttrApplicable27 with AttrApplicable15 with AttrApplicable21 with AttrApplicable18 with AttrApplicable25
    trait VNodeTagMenu extends VNode  with AttrApplicable34
    trait VNodeTagHr extends VNode  with AttrApplicable2 with AttrApplicable37
    trait VNodeTagPlaintext extends VNode
    trait VNodeTagSpacer extends VNode
    trait VNodeTagSource extends VNode  with AttrApplicable21 with AttrApplicable9 with AttrApplicable34 with AttrApplicable7
    trait VNodeTagNoframes extends VNode
    trait VNodeTagDt extends VNode
    trait VNodeTagMap extends VNode  with AttrApplicable4
    trait VNodeTagNav extends VNode
    trait VNodeTagApplet extends VNode  with AttrApplicable2 with AttrApplicable23
    trait VNodeTagAbbr extends VNode
    trait VNodeTagSamp extends VNode
    trait VNodeTagNoembed extends VNode
    trait VNodeTagLi extends VNode  with AttrApplicable38
    trait VNodeTagStyle extends VNode  with AttrApplicable21 with AttrApplicable34
    trait VNodeTagImage extends VNode
    trait VNodeTagParam extends VNode  with AttrApplicable38 with AttrApplicable4
    trait VNodeTagMeter extends VNode  with AttrApplicable38 with AttrApplicable35 with AttrApplicable6 with AttrApplicable19
    trait VNodeTagCenter extends VNode
    trait VNodeTagBr extends VNode
    trait VNodeTagBig extends VNode
    trait VNodeTagTt extends VNode
    trait VNodeTagHgroup extends VNode
    trait VNodeTagRtc extends VNode
    trait VNodeTagU extends VNode
    trait VNodeTagStrike extends VNode
    trait VNodeTagDfn extends VNode
    trait VNodeTagImg extends VNode  with AttrApplicable13 with AttrApplicable2 with AttrApplicable7 with AttrApplicable23 with AttrApplicable12 with AttrApplicable8 with AttrApplicable10 with AttrApplicable9 with AttrApplicable40 with AttrApplicable36
    trait VNodeTagData extends VNode
    trait VNodeTagOptgroup extends VNode  with AttrApplicable1
    trait VNodeTagAudio extends VNode  with AttrApplicable29 with AttrApplicable11 with AttrApplicable10 with AttrApplicable7
    trait VNodeTagUl extends VNode
    trait VNodeTagTrack extends VNode  with AttrApplicable7
    trait VNodeTagLabel extends VNode  with AttrApplicable6 with AttrApplicable22
    trait VNodeTagOption extends VNode  with AttrApplicable38 with AttrApplicable1
    trait VNodeTagA extends VNode  with AttrApplicable27 with AttrApplicable15 with AttrApplicable21 with AttrApplicable18 with AttrApplicable25
    trait VNodeTagDiv extends VNode
    trait VNodeTagRb extends VNode
    trait VNodeTagRt extends VNode
    trait VNodeTagNobr extends VNode
    trait VNodeTagArticle extends VNode
    trait VNodeTagListing extends VNode
    trait VNodeTagMulticol extends VNode
    trait VNodeTagStrong extends VNode
    trait VNodeTagWbr extends VNode
    trait VNodeTagMain extends VNode
    trait VNodeTagEmbed extends VNode  with AttrApplicable34 with AttrApplicable8 with AttrApplicable7
    trait VNodeTagCommand extends VNode  with AttrApplicable34 with AttrApplicable5 with AttrApplicable1
    trait VNodeTagLegend extends VNode
    trait VNodeTagSection extends VNode
    trait VNodeTagI extends VNode
    trait VNodeTagFrame extends VNode
    trait VNodeTagObject extends VNode  with AttrApplicable6 with AttrApplicable13 with AttrApplicable34 with AttrApplicable12 with AttrApplicable8 with AttrApplicable4
    trait VNodeTagFieldset extends VNode  with AttrApplicable4 with AttrApplicable1 with AttrApplicable6
    trait VNodeTagElement extends VNode
    trait VNodeTagCode extends VNode
    trait VNodeTagMarquee extends VNode  with AttrApplicable17 with AttrApplicable11
    trait VNodeTagIns extends VNode  with AttrApplicable24 with AttrApplicable30
    trait VNodeTagTd extends VNode  with AttrApplicable3 with AttrApplicable2 with AttrApplicable17
    trait VNodeTagDatalist extends VNode
    trait VNodeTagSelect extends VNode  with AttrApplicable6 with AttrApplicable31 with AttrApplicable16 with AttrApplicable4 with AttrApplicable32 with AttrApplicable1
    trait VNodeTagSmall extends VNode
    trait VNodeTagAside extends VNode
    trait VNodeTagEm extends VNode
    trait VNodeTagFont extends VNode  with AttrApplicable37
    trait VNodeTagButton extends VNode  with AttrApplicable6 with AttrApplicable41 with AttrApplicable38 with AttrApplicable34 with AttrApplicable16 with AttrApplicable4 with AttrApplicable1
    trait VNodeTagRp extends VNode
    trait VNodeTagDir extends VNode
    trait VNodeTagDl extends VNode
    trait VNodeTagTh extends VNode  with AttrApplicable3 with AttrApplicable2 with AttrApplicable17
    trait VNodeTagTfoot extends VNode  with AttrApplicable2 with AttrApplicable17
    trait VNodeTagMeta extends VNode  with AttrApplicable20 with AttrApplicable4
    trait VNodeTagQ extends VNode  with AttrApplicable30
    trait VNodeTagBlink extends VNode
    trait VNodeTagTr extends VNode  with AttrApplicable2 with AttrApplicable17
    trait VNodeTagB extends VNode
    trait VNodeTagCite extends VNode
    trait VNodeTagBlockquote extends VNode  with AttrApplicable30
    trait VNodeTagProgress extends VNode  with AttrApplicable38 with AttrApplicable6 with AttrApplicable19
    trait VNodeTagCol extends VNode  with AttrApplicable2 with AttrApplicable17 with AttrApplicable14
    trait VNodeTagVideo extends VNode  with AttrApplicable7 with AttrApplicable11 with AttrApplicable8 with AttrApplicable10 with AttrApplicable29
    trait VNodeTagIsindex extends VNode
    trait VNodeTagCaption extends VNode  with AttrApplicable2
    trait VNodeTagNoscript extends VNode
    trait VNodeTagLink extends VNode  with AttrApplicable27 with AttrApplicable15 with AttrApplicable26 with AttrApplicable10 with AttrApplicable21 with AttrApplicable9 with AttrApplicable36
    trait VNodeTagMenuitem extends VNode
    trait VNodeTagP extends VNode
    trait VNodeTagXmp extends VNode
    trait VNodeTagContent extends VNode
    trait VNodeTagBasefont extends VNode  with AttrApplicable37
    trait VNodeTagIframe extends VNode  with AttrApplicable2 with AttrApplicable7 with AttrApplicable8 with AttrApplicable4 with AttrApplicable40 with AttrApplicable36
    trait VNodeTagH1 extends VNode
    trait VNodeTagKeygen extends VNode  with AttrApplicable4 with AttrApplicable1 with AttrApplicable16 with AttrApplicable6
    trait VNodeTagAddress extends VNode
    trait VNodeTagDetails extends VNode
    trait VNodeTagPicture extends VNode
    trait VNodeTagHeader extends VNode
    trait VNodeTagTemplate extends VNode
    trait VNodeTagSub extends VNode
    trait VNodeTagTime extends VNode  with AttrApplicable24
    trait VNodeTagScript extends VNode  with AttrApplicable7 with AttrApplicable34 with AttrApplicable20 with AttrApplicable26 with AttrApplicable10 with AttrApplicable36
    trait VNodeTagTitle extends VNode
    trait VNodeTagOutput extends VNode  with AttrApplicable4 with AttrApplicable6 with AttrApplicable22
    trait VNodeTagFigure extends VNode
    trait VNodeTagForm extends VNode  with AttrApplicable39 with AttrApplicable4 with AttrApplicable25 with AttrApplicable28
    trait VNodeTagHtml extends VNode
    trait VNodeTagRuby extends VNode
    trait VNodeTagMark extends VNode
    trait VNodeTagBgsound extends VNode  with AttrApplicable11
    trait VNodeTagBdi extends VNode
    trait VNodeTagKbd extends VNode
    trait VNodeTagSlot extends VNode
    trait VNodeTagSup extends VNode
    trait VNodeTagFrameset extends VNode
    trait VNodeTagFooter extends VNode
    trait VNodeTagInput extends VNode  with AttrApplicable28 with AttrApplicable39 with AttrApplicable6 with AttrApplicable35 with AttrApplicable41 with AttrApplicable7 with AttrApplicable38 with AttrApplicable33 with AttrApplicable34 with AttrApplicable23 with AttrApplicable12 with AttrApplicable31 with AttrApplicable8 with AttrApplicable16 with AttrApplicable4 with AttrApplicable32 with AttrApplicable5 with AttrApplicable1 with AttrApplicable19
    trait VNodeTagSummary extends VNode
    trait VNodeTagDialog extends VNode
    trait VNodeTagVar extends VNode
    trait VNodeTagCanvas extends VNode  with AttrApplicable8
    trait VNodeTagTable extends VNode  with AttrApplicable2 with AttrApplicable17 with AttrApplicable13
    trait VNodeTagNextid extends VNode
    trait VNodeTagColgroup extends VNode  with AttrApplicable2 with AttrApplicable17 with AttrApplicable14
    trait VNodeTagDd extends VNode

    /** The HTML Acronym Element (<acronym>) allows authors to clearly indicate a sequence of characters that compose an acronym or abbreviation for a word. This element has been removed in HTML5. Use <abbr> element. */
    lazy val acronym = Tag[VNodeTagAcronym]("acronym")
    /** The HTML Table Body element (<tbody>) encapsulates a set of table row (<tr> elements, indicating that they comprise the body of the table (<table>). */
    lazy val tbody = Tag[VNodeTagTbody]("tbody")
    /** The HTML <del> element represents a range of text that has been deleted from a document. */
    lazy val del = Tag[VNodeTagDel]("del")
    /** The HTML <pre> element represents preformatted text which is to be presented exactly as written in the HTML file. */
    lazy val pre = Tag[VNodeTagPre]("pre")
    /** The HTML Bidirectional Text Override element (<bdo>) overrides the current directionality of text, so that the text within is rendered in a different direction. */
    lazy val bdo = Tag[VNodeTagBdo]("bdo")
    /** The HTML <textarea> element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form. */
    lazy val textarea = Tag[VNodeTagTextarea]("textarea")
    /** The HTML <thead> element defines a set of rows defining the head of the columns of the table. */
    lazy val thead = Tag[VNodeTagThead]("thead")
    /** The HTML <figcaption> element represents a caption or legend for the rest of the contents its parent <figure> element, if any. */
    lazy val figcaption = Tag[VNodeTagFigcaption]("figcaption")
    /** The HTML <s> element renders text with a strikethrough, or a line through it. Use the <s> element to represent things that are no longer relevant or no longer accurate. However, <s> is not appropriate when indicating document edits; for that, use the <del> and <ins> elements, as appropriate. */
    lazy val s = Tag[VNodeTagS]("s")
    /** The HTML <ol> element represents an ordered list of items, typically rendered as a numbered list. */
    lazy val ol = Tag[VNodeTagOl]("ol")
    /** The HTML <span> element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. */
    lazy val span = Tag[VNodeTagSpan]("span")
    /** The HTML <shadow> elementâ€”an obsolete part of the Web Components technology suiteâ€”was intended to be used as a shadow DOM insertion point. */
    lazy val shadow = Tag[VNodeTagShadow]("shadow")
    /** The HTML <body> Element represents the content of an HTML document. There can be only one <body> element in a document. */
    lazy val body = Tag[VNodeTagBody]("body")
    /** The HTML <area> element defines a hot-spot region on an image, and optionally associates it with a hypertext link. This element is used only within a <map> element. */
    lazy val area = Tag[VNodeTagArea]("area")
    /** The HTML <menu> element represents a group of commands that a user can perform or activate. This includes both list menus, which might appear across the top of a screen, as well as context menus, such as those that might appear underneath a button after it has been clicked. */
    lazy val menu = Tag[VNodeTagMenu]("menu")
    /** The HTML <hr> element represents a thematic break between paragraph-level elements (for example, a change of scene in a story, or a shift of topic with a section); historically, this has been presented as a horizontal rule or line. */
    lazy val hr = Tag[VNodeTagHr]("hr")
    /** The HTML Plaintext Element (<plaintext>) renders everything following the start tag as raw text, ignoring any following HTML. */
    lazy val plaintext = Tag[VNodeTagPlaintext]("plaintext")
    /** <spacer> is an obsolete HTML element which allowed insertion of empty spaces on pages. It was devised by Netscape to accomplish the same effect as a single-pixel layout image, which was something web designers used to use to add white spaces to web pages without actually using an image. However, <spacer> no longer supported by any major browser and the same effects can now be achieved using simple CSS. */
    lazy val spacer = Tag[VNodeTagSpacer]("spacer")
    /** The HTML <source> element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element. It is an empty element. It is commonly used to serve the same media content in multiple formats supported by different browsers. */
    lazy val source = Tag[VNodeTagSource]("source")
    /** The obsolete HTML No Frames or frame fallback element, <noframes>, provides content to be presented in browsers that don't support (or have disabled support for) the <frame> element. */
    lazy val noframes = Tag[VNodeTagNoframes]("noframes")
    /** The HTML <dt> element specifies a term in a description or definition list, and as such must be used inside a <dl> element. */
    lazy val dt = Tag[VNodeTagDt]("dt")
    /** The HTML <map> element is used with <area> elements to define an image map (a clickable link area). */
    lazy val map = Tag[VNodeTagMap]("map")
    /** The HTML <nav> element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes. */
    lazy val nav = Tag[VNodeTagNav]("nav")
    /** The obsolete HTML Applet Element (<applet>) embeds a Java applet into the document; this element has been deprecated in favor of <object>. */
    lazy val applet = Tag[VNodeTagApplet]("applet")
    /** The HTML Abbreviation element (<abbr>) represents an abbreviation or acronym; the optional title attribute can provide an expansion or description for the abbreviation. */
    lazy val abbr = Tag[VNodeTagAbbr]("abbr")
    /** The HTML Sample Element (<samp>) is used to enclose inline text which represents sample (or quoted) output from a computer program. */
    lazy val samp = Tag[VNodeTagSamp]("samp")
    /** The <noembed> element is an obsolete, non-standard way to provide alternative, or "fallback", content for browsers that do not support the <embed> element or do not support the type of embedded content an author wishes to use. */
    lazy val noembed = Tag[VNodeTagNoembed]("noembed")
    /** The HTML <li> element is used to represent an item in a list. It must be contained in a parent element: an ordered list (<ol>), an unordered list (<ul>), or a menu (<menu>). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter. */
    lazy val li = Tag[VNodeTagLi]("li")
    /** The HTML <style> element contains style information for a document, or part of a document. */
    lazy val style = Tag[VNodeTagStyle]("style")
    /** The obsolete HTML Image element (<image>) is an obsolete remnant of an ancient version of HTML lost in the mists of time; use the standard <img> element instead. */
    lazy val image = Tag[VNodeTagImage]("image")
    /** The HTML <param> element defines parameters for an <object> element. */
    lazy val param = Tag[VNodeTagParam]("param")
    /** The HTML <meter> element represents either a scalar value within a known range or a fractional value. */
    lazy val meter = Tag[VNodeTagMeter]("meter")
    /** The obsolete HTML Center Element (<center>) is a block-level element that displays its block-level or inline contents centered horizontally within its containing element. */
    lazy val center = Tag[VNodeTagCenter]("center")
    /** The HTML <br> element produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant. */
    lazy val br = Tag[VNodeTagBr]("br")
    /** The obsolete HTML Big Element (<big>) renders the enclosed text at a font size one level larger than the surrounding text (medium becomes large, for example). */
    lazy val big = Tag[VNodeTagBig]("big")
    /** The obsolete HTML Teletype Text element (<tt>) creates inline text which is presented using the user agent's default monospace font face. */
    lazy val tt = Tag[VNodeTagTt]("tt")
    /** The HTML <hgroup> element represents a multi-level heading for a section of a document. It groups a set of <h1>â€“<h6> elements. */
    lazy val hgroup = Tag[VNodeTagHgroup]("hgroup")
    /** The HTML Ruby Text Container (<rtc>) element embraces semantic annotations of characters presented in a ruby of <rb> elements used inside of <ruby> element. <rb> elements can have both pronunciation (<rt>) and semantic (<rtc>) annotations. */
    lazy val rtc = Tag[VNodeTagRtc]("rtc")
    /** The HTML Unarticulated Annotation element (<u>) represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. */
    lazy val u = Tag[VNodeTagU]("u")
    /** The HTML <strike> element (or HTML Strikethrough Element) places a strikethrough (horizontal line) over text. */
    lazy val strike = Tag[VNodeTagStrike]("strike")
    /** The HTML Definition element (<dfn>) is used to indicate the term being defined within the context of a definition phrase or sentence. */
    lazy val dfn = Tag[VNodeTagDfn]("dfn")
    /** The HTML <img> element embeds an image into the document. */
    lazy val img = Tag[VNodeTagImg]("img")
    /** The HTML <data> element links a given content with a machine-readable translation. If the content is time- or date-related, the <time> element must be used. */
    lazy val data = Tag[VNodeTagData]("data")
    /** The HTML <optgroup> element creates a grouping of options within a <select> element. */
    lazy val optgroup = Tag[VNodeTagOptgroup]("optgroup")
    /** The HTML <audio> element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream. */
    lazy val audio = Tag[VNodeTagAudio]("audio")
    /** The HTML <ul> element represents an unordered list of items, typically rendered as a bulleted list. */
    lazy val ul = Tag[VNodeTagUl]("ul")
    /** The HTML <track> element is used as a child of the media elements <audio> and <video>. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in WebVTT format (.vtt files) â€” Web Video Text Tracks or Timed Text Markup Language (TTML). */
    lazy val track = Tag[VNodeTagTrack]("track")
    /** The HTML <label> element represents a caption for an item in a user interface. */
    lazy val label = Tag[VNodeTagLabel]("label")
    /** The HTML <option> element is used to define an item contained in a <select>, an <optgroup>, or a <datalist> element. As such, <option> can represent menu items in popups and other lists of items in an HTML document. */
    lazy val option = Tag[VNodeTagOption]("option")
    /** The HTML <a> element (or anchor element) creates a hyperlink to other web pages, files, locations within the same page, email addresses, or any other URL. */
    lazy val a = Tag[VNodeTagA]("a")
    /** The HTML Content Division element (<div>) is the generic container for flow content. It has no effect on the content or layout until styled using CSS. */
    lazy val div = Tag[VNodeTagDiv]("div")
    /** The HTML Ruby Base (<rb>) element is used to delimit the base text component of a <ruby> annotation, i.e. the text that is being annotated. */
    lazy val rb = Tag[VNodeTagRb]("rb")
    /** The HTML Ruby Text (<rt>) element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The <rt> element must always be contained within a <ruby> element. */
    lazy val rt = Tag[VNodeTagRt]("rt")
    /** The non-standard, obsolete HTML <nobr> element prevents the text it contains from automatically wrapping across multiple lines, potentially resulting in the user having to scroll horizontally to see the entire width of the text. */
    lazy val nobr = Tag[VNodeTagNobr]("nobr")
    /** The HTML <article> element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry. */
    lazy val article = Tag[VNodeTagArticle]("article")
    /** The HTML Listing Element (<listing>) renders text between the start and end tags without interpreting the HTML in between and using a monospaced font. The HTML 2 standard recommended that lines shouldn't be broken when not greater than 132 characters. */
    lazy val listing = Tag[VNodeTagListing]("listing")
    /** The HTML Multi-Column Layout element (<multicol>) was an experimental element designed to allow multi-column layouts and must not be used. */
    lazy val multicol = Tag[VNodeTagMulticol]("multicol")
    /** The HTML Strong Importance Element (<strong>) indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type. */
    lazy val strong = Tag[VNodeTagStrong]("strong")
    /** The HTML <wbr> element represents a word break opportunityâ€”a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location. */
    lazy val wbr = Tag[VNodeTagWbr]("wbr")
    /** The HTML <main> element represents the dominant content of the <body> of a document, portion of a document or application. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application. */
    lazy val main = Tag[VNodeTagMain]("main")
    /** The HTML <embed> element embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in. */
    lazy val embed = Tag[VNodeTagEmbed]("embed")
    /** The HTML Command element (<command>) represents a command which the user can invoke. Commands are often used as part of a context menu or toolbar. */
    lazy val command = Tag[VNodeTagCommand]("command")
    /** The HTML <legend> element represents a caption for the content of its parent <fieldset>. */
    lazy val legend = Tag[VNodeTagLegend]("legend")
    /** The HTML <section> element represents a standalone section â€” which doesn't have a more specific semantic element to represent it â€” contained within an HTML document. */
    lazy val section = Tag[VNodeTagSection]("section")
    /** The HTML <i> element represents a range of text that is set off from the normal text for some reason. Some examples include technical terms, foreign language phrases, or fictional character thoughts. It is typically displayed in italic type. */
    lazy val i = Tag[VNodeTagI]("i")
    /** <frame> is an HTML element which defines a particular area in which another HTML document can be displayed. A frame should be used within a <frameset>. */
    lazy val frame = Tag[VNodeTagFrame]("frame")
    /** The HTML <object> element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin. */
    lazy val object_ = Tag[VNodeTagObject]("object")
    /** The HTML <fieldset> element is used to group several controls as well as labels (<label>) within a web form. */
    lazy val fieldset = Tag[VNodeTagFieldset]("fieldset")
    /** The obsolete HTML <element> element was part of the Web Components specification; it was intended to be used to define new custom DOM elements. */
    lazy val element = Tag[VNodeTagElement]("element")
    /** The HTML <code> element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. */
    lazy val code = Tag[VNodeTagCode]("code")
    /** The HTML <marquee> element is used to insert a scrolling area of text. You can control what happens when the text reaches the edges of its content area using its attributes. */
    lazy val marquee = Tag[VNodeTagMarquee]("marquee")
    /** The HTML <ins> element represents a range of text that has been added to a document. */
    lazy val ins = Tag[VNodeTagIns]("ins")
    /** The HTML <td> element defines a cell of a table that contains data. It participates in the table model. */
    lazy val td = Tag[VNodeTagTd]("td")
    /** The HTML <datalist> element contains a set of <option> elements that represent the values available for other controls. */
    lazy val datalist = Tag[VNodeTagDatalist]("datalist")
    /** The HTML <select> element represents a control that provides a menu of options */
    lazy val select = Tag[VNodeTagSelect]("select")
    /** The HTML <small> element makes the text font size one size smaller (for example, from large to medium, or from small to x-small) down to the browser's minimum font size. In HTML5, this element is repurposed to represent side-comments and small print, including copyright and legal text, independent of its styled presentation. */
    lazy val small = Tag[VNodeTagSmall]("small")
    /** The HTML <aside> element represents a portion of a document whose content is only indirectly related to the document's main content. */
    lazy val aside = Tag[VNodeTagAside]("aside")
    /** The HTML <em> element marks text that has stress emphasis. The <em> element can be nested, with each level of nesting indicating a greater degree of emphasis. */
    lazy val em = Tag[VNodeTagEm]("em")
    /** The HTML Font Element (<font>) defines the font size, color and face for its content. */
    lazy val font = Tag[VNodeTagFont]("font")
    /** The HTML <button> element represents a clickable button, which can be used in forms or anywhere in a document that needs simple, standard button functionality. */
    lazy val button = Tag[VNodeTagButton]("button")
    /** The HTML Ruby Fallback Parenthesis (<rp>) element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the <ruby> element. */
    lazy val rp = Tag[VNodeTagRp]("rp")
    /** The obsolete HTML Directory element (<dir>) is used as a container for a directory of files and/or folders, potentially with styles and icons applied by the user agent. */
    lazy val dir = Tag[VNodeTagDir]("dir")
    /** The HTML <dl> element represents a description list. The element encloses a list of groups of terms (specified using the <dt> element) and descriptions (provided by <dd> elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs). */
    lazy val dl = Tag[VNodeTagDl]("dl")
    /** The HTML <th> element defines a cell as header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes. */
    lazy val th = Tag[VNodeTagTh]("th")
    /** The HTML <tfoot> element defines a set of rows summarizing the columns of the table. */
    lazy val tfoot = Tag[VNodeTagTfoot]("tfoot")
    /** The HTML <meta> element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>. */
    lazy val meta = Tag[VNodeTagMeta]("meta")
    /** The HTML <q> element indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. */
    lazy val q = Tag[VNodeTagQ]("q")
    /** The HTML Blink Element (<blink>) is a non-standard element which causes the enclosed text to flash slowly. */
    lazy val blink = Tag[VNodeTagBlink]("blink")
    /** The HTML <tr> element defines a row of cells in a table. The row's cells can then be established using a mix of <td> (data cell) and <th> (header cell) elements.The HTML <tr> element specifies that the markup contained inside the <tr> block comprises one row of a table, inside which the <th> and <td> elements create header and data cells, respectively, within the row. */
    lazy val tr = Tag[VNodeTagTr]("tr")
    /** The HTML Bring Attention To element (<b>) is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. */
    lazy val b = Tag[VNodeTagB]("b")
    /** The HTML Citation element (<cite>) is used to describe a reference to a cited creative work, and must include either the title or author or the URL of that work. */
    lazy val cite = Tag[VNodeTagCite]("cite")
    /** The HTML <blockquote> Element (or HTML Block Quotation Element) indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the <cite> element. */
    lazy val blockquote = Tag[VNodeTagBlockquote]("blockquote")
    /** The HTML <progress> element displays an indicator showing the completion progress of a task, typically displayed as a progress bar. */
    lazy val progress = Tag[VNodeTagProgress]("progress")
    /** The HTML <col> element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element. */
    lazy val col = Tag[VNodeTagCol]("col")
    /** The HTML Video element (<video>) embeds a media player which supports video playback into the document. */
    lazy val video = Tag[VNodeTagVideo]("video")
    /** <isindex> is an obsolete HTML element that puts a text field in a page for querying the document. */
    lazy val isindex = Tag[VNodeTagIsindex]("isindex")
    /** The HTML Table Caption element (<caption>) specifies the caption (or title) of a table, and if used is always the first child of a <table>. */
    lazy val caption = Tag[VNodeTagCaption]("caption")
    /** The HTML <noscript> element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser. */
    lazy val noscript = Tag[VNodeTagNoscript]("noscript")
    /** The HTML External Resource Link element (<link>) specifies relationships between the current document and an external resource. This element is most commonly used to link to stylesheets, but is also used to establish site icons (both "favicon" style icons and mobile home screen/app icons) among other things. */
    lazy val link = Tag[VNodeTagLink]("link")
    /** The HTML <menuitem> element represents a command that a user is able to invoke through a popup menu. This includes context menus, as well as menus that might be attached to a menu button. */
    lazy val menuitem = Tag[VNodeTagMenuitem]("menuitem")
    /** The HTML <p> element represents a paragraph. */
    lazy val p = Tag[VNodeTagP]("p")
    /** The HTML Example Element (<xmp>) renders text between the start and end tags without interpreting the HTML in between and using a monospaced font. The HTML2 specification recommended that it should be rendered wide enough to allow 80 characters per line. */
    lazy val xmp = Tag[VNodeTagXmp]("xmp")
    /** The HTML <content> elementâ€”an obsolete part of the Web Components suite of technologiesâ€”was used inside of Shadow DOM as an insertion point, and wasn't meant to be used in ordinary HTML. */
    lazy val content = Tag[VNodeTagContent]("content")
    /** The obsolete HTML Base Font element (<basefont>) sets a default font face, size, and color for the other elements which are descended from its parent element. */
    lazy val basefont = Tag[VNodeTagBasefont]("basefont")
    /** The HTML Inline Frame element (<iframe>) represents a nested browsing context, effectively embedding another HTML page into the current page. */
    lazy val iframe = Tag[VNodeTagIframe]("iframe")
    /** The HTML <h1>â€“<h6> elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest. */
    lazy val h1 = Tag[VNodeTagH1]("h1")
    /** The HTML <keygen> element exists to facilitate generation of key material, and submission of the public key as part of an HTML form. This mechanism is designed for use with Web-based certificate management systems. It is expected that the <keygen> element will be used in an HTML form along with other information needed to construct a certificate request, and that the result of the process will be a signed certificate. */
    lazy val keygen = Tag[VNodeTagKeygen]("keygen")
    /** The HTML <address> element indicates that the enclosed HTML provides contact information for a person or people, or for an organization. */
    lazy val address = Tag[VNodeTagAddress]("address")
    /** The HTML Details Element (<details>) creates a disclosure widget in which information is visible only when the widget is toggled into an "open" state. */
    lazy val details = Tag[VNodeTagDetails]("details")
    /** The HTML <picture> element serves as a container for zero or more <source> elements and one <img> element to provide versions of an image for different display device scenarios. */
    lazy val picture = Tag[VNodeTagPicture]("picture")
    /** The HTML <header> element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also other elements like a logo, a search form, an author name, and so on. */
    lazy val header = Tag[VNodeTagHeader]("header")
    /** The HTML Content Template (<template>) element is a mechanism for holding client-side content that is not to be rendered when a page is loaded but may subsequently be instantiated during runtime using JavaScript. */
    lazy val template = Tag[VNodeTagTemplate]("template")
    /** The HTML Subscript element (<sub>) specifies inline text which should be displayed as subscript for solely typographical reasons. */
    lazy val sub = Tag[VNodeTagSub]("sub")
    /** The HTML <time> element represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders. */
    lazy val time = Tag[VNodeTagTime]("time")
    /** The HTML <script> element is used to embed or reference executable code; this is typically used to embed or refer to JavaScript code. */
    lazy val script = Tag[VNodeTagScript]("script")
    /** The HTML Title element (<title>) defines the document's title that is shown in a browser's title bar or a page's tab. */
    lazy val title = Tag[VNodeTagTitle]("title")
    /** The HTML Output element (<output>) is a container element into which a site or app can inject the results of a calculation or the outcome of a user action. */
    lazy val output = Tag[VNodeTagOutput]("output")
    /** The HTML <figure> element represents self-contained content, frequently with a caption (<figcaption>), and is typically referenced as a single unit. */
    lazy val figure = Tag[VNodeTagFigure]("figure")
    /** The HTML <form> element represents a document section that contains interactive controls for submitting information to a web server. */
    lazy val form = Tag[VNodeTagForm]("form")
    /** The HTML <html> element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element. */
    lazy val html = Tag[VNodeTagHtml]("html")
    /** The HTML <ruby> element represents a ruby annotation. Ruby annotations are for showing pronunciation of East Asian characters. */
    lazy val ruby = Tag[VNodeTagRuby]("ruby")
    /** The HTML Mark Text element (<mark>) represents text which is marked or highlighted for reference or notation purposes, due to the marked passage's relevance or importance in the enclosing context. */
    lazy val mark = Tag[VNodeTagMark]("mark")
    /** The Internet Explorer only HTML Background Sound element (<bgsound>) sets up a sound file to play in the background while the page is used; use <audio> instead. */
    lazy val bgsound = Tag[VNodeTagBgsound]("bgsound")
    /** The HTML Bidirectional Isolate element (<bdi>) tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. */
    lazy val bdi = Tag[VNodeTagBdi]("bdi")
    /** The HTML Keyboard Input element (<kbd>) represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. */
    lazy val kbd = Tag[VNodeTagKbd]("kbd")
    /** The HTML <slot> elementâ€”part of the Web Components technology suiteâ€”is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together. */
    lazy val slot = Tag[VNodeTagSlot]("slot")
    /** The HTML Superscript element (<sup>) specifies inline text which is to be displayed as superscript for solely typographical reasons. */
    lazy val sup = Tag[VNodeTagSup]("sup")
    /** <frameset> is an HTML element which is used to contain <frame> elements. */
    lazy val frameset = Tag[VNodeTagFrameset]("frameset")
    /** The HTML <footer> element represents a footer for its nearest sectioning content or sectioning root element. A footer typically contains information about the author of the section, copyright data or links to related documents. */
    lazy val footer = Tag[VNodeTagFooter]("footer")
    /** The HTML <input> element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. */
    lazy val input = Tag[VNodeTagInput]("input")
    /** The HTML Disclosure Summary element (<summary>) element specifies a summary, caption, or legend for a <details> element's disclosure box. */
    lazy val summary = Tag[VNodeTagSummary]("summary")
    /** The HTML <dialog> element represents a dialog box or other interactive component, such as an inspector or window. */
    lazy val dialog = Tag[VNodeTagDialog]("dialog")
    /** The HTML Variable element (<var>) represents the name of a variable in a mathematical expression or a programming context. */
    lazy val var_ = Tag[VNodeTagVar]("var")
    /** Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations. */
    lazy val canvas = Tag[VNodeTagCanvas]("canvas")
    /** The HTML <table> element represents tabular data â€” that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data. */
    lazy val table = Tag[VNodeTagTable]("table")
    /** <nextid> is an obsolete HTML element that served to enable the NeXT web designing tool to generate automatic NAME labels for its anchors. */
    lazy val nextid = Tag[VNodeTagNextid]("nextid")
    /** The HTML <colgroup> element defines a group of columns within a table. */
    lazy val colgroup = Tag[VNodeTagColgroup]("colgroup")
    /** The HTML <dd> element provides the details about or the definition of the preceding term (<dt>) in a description list (<dl>). */
    lazy val dd = Tag[VNodeTagDd]("dd")
}
